{"version":3,"sources":["components/card/index.js","components/scorebar/index.js","components/gameboard/index.js","App.js","serviceWorker.js","index.js"],"names":["cardStyles","border","Card","classValue","word","visible","className","style","scorebarStyles","margin","colourForTeam","team","red","blue","toLowerCase","Scorebar","more","score","total","players","spymaster","Object","assign","borderRadius","color","map","player","Gameboard","words","i","key","slice","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yPAEMA,G,UAAa,CACjBC,OAAQ,oBASKC,EANF,SAAC,GAAD,IAAGC,EAAH,EAAGA,WAAYC,EAAf,EAAeA,KAAf,EAAqBC,QAArB,OACX,yBAAKC,UAAWH,EAAYI,MAAOP,GACjC,2BAAII,KCNFI,EAAiB,CACrBC,OAAQ,QAGJC,EAAgB,SAACC,GAAD,MAAW,CAC/BC,IAAK,UACLC,KAAM,WACNF,EAAKG,gBAoBQC,EAhBE,SAAC,GAAD,IAFEC,EAECb,EAAH,EAAGA,WAAYc,EAAf,EAAeA,MAAOC,EAAtB,EAAsBA,MAAOP,EAA7B,EAA6BA,KAAMQ,EAAnC,EAAmCA,QAASC,EAA5C,EAA4CA,UAA5C,OACf,yBAAKd,UAAWH,EAAYI,OAHXS,EAG4B,GAHnBK,OAAOC,OAAO,GAAId,EAAgBQ,KAI1D,yBAAKT,MAAO,CAACN,OAAO,aAAD,OAAeS,EAAcC,IAASY,aAAc,SACrE,oCACA,qCAAON,EAAP,cAAkBC,KAEpB,uBAAGX,MAAO,CAACiB,MAAOd,EAAcC,KAASA,GACzC,6BACE,uBAAGJ,MAAO,CAACiB,MAAOd,EAAcC,KAAhC,WACCQ,EAAQM,KAAI,SAAAC,GAAM,OAAI,2BAAIA,OAE7B,uBAAGnB,MAAO,CAACiB,MAAOd,EAAcC,KAAhC,aACA,2BAAIS,KCeOO,G,MAnCG,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChB,6BACE,mDACA,yBAAKtB,UAAU,WACb,kBAAC,EAAD,CACEH,WAAY,eACZc,MAAO,IACPC,MAAO,KACPP,KAAM,MACNQ,QAAS,CAAC,QAAS,WAAY,QAC/BC,UAAW,UAGb,yBAAKd,UAAU,aACd,CAAC,EAAG,EAAG,EAAG,EAAG,GAAGmB,KAAI,SAAAI,GAAC,OACpB,yBAAKC,IAAKD,EAAGvB,UAAU,YACpBsB,EAAMG,MAAM,EAAQ,EAAJF,EAAO,EAAQ,EAAJA,GAAOJ,KAAI,SAAArB,GAAI,OACzC,kBAAC,EAAD,CAAM0B,IAAKD,EAAIzB,EAAMA,KAAMA,EAAMD,WAAY,iBAMnD,kBAAC,EAAD,CACEA,WAAY,gBACZc,MAAO,IACPC,MAAO,KACPP,KAAM,OACNQ,QAAS,CAAC,QAAS,WAAY,QAC/BC,UAAW,cC5BbQ,EAAQ,CACZ,OACA,OACA,WACA,OACA,MACA,QACA,SACA,OACA,OACA,QACA,OACA,QACA,MACA,aACA,QACA,WACA,UACA,SACA,QACA,QACA,WACA,QACA,UACA,QACA,YAWaI,MARf,WACE,OACE,yBAAK1B,UAAU,OACb,kBAAC,EAAD,CAAWsB,MAAOA,MCzBJK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.14590fb4.chunk.js","sourcesContent":["import React from 'react';\n\nconst cardStyles = {\n  border: \"2px black solid\"\n};\n\nconst Card = ({ classValue, word, visible = false }) => (\n  <div className={classValue} style={cardStyles}>\n    <p>{word}</p>\n  </div>\n);\n\nexport default Card;\n","import React from 'react';\n\nconst scorebarStyles = {\n  margin: \"1rem\"\n};\n\nconst colourForTeam = (team) => ({\n  red: \"#CD3B49\",\n  blue: \"#80C2FF\"\n}[team.toLowerCase()]);\n\nconst addStyles = (more) => Object.assign({}, scorebarStyles, more)\n\nconst Scorebar = ({ classValue, score, total, team, players, spymaster }) => (\n  <div className={classValue} style={addStyles({})}>\n    <div style={{border: `2px solid ${colourForTeam(team)}`, borderRadius: \"20px\"}}>\n      <p>Score</p>\n      <p>{`${score} / ${total}`}</p>\n    </div>\n    <p style={{color: colourForTeam(team)}}>{team}</p>\n    <div>\n      <p style={{color: colourForTeam(team)}}>Players</p>\n      {players.map(player => <p>{player}</p>)}\n    </div>\n    <p style={{color: colourForTeam(team)}}>Spymaster</p>\n    <p>{spymaster}</p>\n  </div>\n);\n\nexport default Scorebar;\n","import React from 'react';\nimport Card from '../card';\nimport Scorebar from '../scorebar';\nimport './Gameboard.css'\n\nconst Gameboard = ({ words }) => (\n  <div>\n    <h1>This is a Gameboard</h1>\n    <div className=\"wrapper\">\n      <Scorebar\n        classValue={\"left-sidebar\"}\n        score={420}\n        total={9001}\n        team={\"Red\"}\n        players={[\"shoyu\", \"scallion\", \"nori\"]}\n        spymaster={\"chasu\"}\n        />\n\n      <div className=\"gameboard\">\n      {[0, 1, 2, 3, 4].map(i =>\n        <div key={i} className=\"card-row\">\n          {words.slice(0 + i * 5, 5 + i * 5).map(word =>\n            <Card key={i + word} word={word} classValue={\"card\"} />\n          )}\n        </div>\n      )}\n      </div>\n\n      <Scorebar\n        classValue={\"right-sidebar\"}\n        score={420}\n        total={9001}\n        team={\"Blue\"}\n        players={[\"shoyu\", \"scallion\", \"nori\"]}\n        spymaster={\"chasu\"}\n        />\n    </div>\n  </div>\n);\n\nexport default Gameboard;\n","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\n\nimport Gameboard from './components/gameboard';\n\nconst words = [\n  \"camp\",\n  \"deer\",\n  \"proposal\",\n  \"walk\",\n  \"dip\",\n  \"screw\",\n  \"denial\",\n  \"rich\",\n  \"know\",\n  \"sheet\",\n  \"lose\",\n  \"charm\",\n  \"pan\",\n  \"researcher\",\n  \"tight\",\n  \"adoption\",\n  \"volcano\",\n  \"result\",\n  \"crack\",\n  \"lemon\",\n  \"domestic\",\n  \"aware\",\n  \"garbage\",\n  \"lover\",\n  \"organize\"\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Gameboard words={words} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}